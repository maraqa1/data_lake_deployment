
version: "3.9"

x-db-env: &db_env
  DATABASE_USER: ${POSTGRES_USER}
  DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
  DATABASE_URL: jdbc:postgresql://airbyte-db:5432/${POSTGRES_DB}
  CONFIG_DATABASE_USER: ${POSTGRES_USER}
  CONFIG_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
  CONFIG_DATABASE_URL: jdbc:postgresql://airbyte-db:5432/${POSTGRES_DB}

services:
  airbyte-db:
    image: airbyte/db:0.58.0
    container_name: airbyte-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # use a subdir to avoid initdb “exists but not empty” error
      - ./volumes/pgdata:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [data_net]

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z-cpuv1
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Console
    volumes:
      - ./volumes/minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [data_net]

  airbyte-server:
    image: airbyte/server:0.58.0
    container_name: airbyte-server
    restart: unless-stopped
    depends_on:
      airbyte-db:
        condition: service_healthy
    environment:
      <<: *db_env
      # If you’ll use MinIO from Airbyte jobs:
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/api/v1/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
    env_file: [.env]
    networks: [data_net]

  airbyte-worker:
    image: airbyte/worker:0.58.0
    container_name: airbyte-worker
    restart: unless-stopped
    depends_on:
      airbyte-server:
        condition: service_healthy
    environment:
      <<: *db_env
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    env_file: [.env]
    networks: [data_net]

  airbyte-cron:
    image: airbyte/cron:0.58.0
    container_name: airbyte-cron
    restart: unless-stopped
    depends_on:
      airbyte-server:
        condition: service_healthy
    environment:
      <<: *db_env
    env_file: [.env]
    networks: [data_net]

  airbyte-webapp:
    image: airbyte/webapp:0.58.0
    container_name: airbyte-webapp
    restart: unless-stopped
    depends_on:
      airbyte-server:
        condition: service_healthy
    ports:
      - "8001:80"
    networks: [data_net]

networks:
  data_net:

volumes:
  # named volumes not strictly needed since we bind mount above,
  # but leaving here if you want to switch later:
  pgdata:
  minio_data:
